
#ifndef FXAA_H
#define FXAA_H

// Adapted from https://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-opengl-test-radeon-geforce/3/

#include "defs.glslh"

#ifndef FXAA_SUBPIX_SHIFT
    #define FXAA_SUBPIX_SHIFT (1.0/4.0)
#endif

#ifndef FXAA_REDUCE_MIN
    #define FXAA_REDUCE_MIN (1.0/128.0)
#endif

#ifndef FXAA_REDUCE_MUL
    #define FXAA_REDUCE_MUL (1.0/8.0)
#endif

#ifndef FXAA_SPAN_MAX
    #define FXAA_SPAN_MAX 8.0
#endif

#ifdef FRAG_STAGE

vec3 fxaa(sampler2D tex, vec4 posPos) {
    vec2 rcpFrame = vec2(1.0) / textureSize(tex, 0);

    vec3 rgbNW = textureLod(tex, posPos.zw, 0).rgb;
    vec3 rgbNE = textureLodOffset(tex, posPos.zw, 0, ivec2(1, 0)).rgb;
    vec3 rgbSW = textureLodOffset(tex, posPos.zw, 0, ivec2(0, 1)).rgb;
    vec3 rgbSE = textureLodOffset(tex, posPos.zw, 0, ivec2(1, 1)).rgb;
    vec3 rgbM  = textureLod(tex, posPos.xy, 0).rgb;

    vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);

    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

    vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

    float dirReduce = max(
        (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
        FXAA_REDUCE_MIN
    );

    float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX), dir * rcpDirMin)) * rcpFrame.xy;

    vec3 rgbA = 0.5 * (
        textureLod(tex, posPos.xy + dir * (1.0/3.0 - 0.5), 0).rgb +
        textureLod(tex, posPos.xy + dir * (2.0/3.0 - 0.5), 0).rgb
    );

    vec3 rgbB = rgbA * 0.5 + 0.25 * (
        textureLod(tex, posPos.xy + dir * (0.0/3.0 - 0.5), 0).rgb +
        textureLod(tex, posPos.xy + dir * (3.0/3.0 - 0.5), 0).rgb
    );

    float lumaB = dot(rgbB, luma);

    if((lumaB < lumaMin) || (lumaB > lumaMax)) {
        return rgbA;
    }

    return rgbB;
}

#endif

#ifdef VERT_STAGE

vec4 fxaaCoords(sampler2D tex, vec2 tc) {
    vec2 rcpFrame = vec2(1.0) / textureSize(tex, 0);
    return vec4(tc, tc - (rcpFrame * (0.5 + FXAA_SUBPIX_SHIFT)));
}

#endif

#endif
